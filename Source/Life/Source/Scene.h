/******************************************************************************/
/*!
\file	Scene.h
\author Wen Sheng Tang
\par	email: tang_wen_sheng\@nyp.edu.sg
\brief
Parent class of all scenes, initialise, update and render
*/
/******************************************************************************/
#ifndef SCENE_H
#define SCENE_H

#include "Application.h"

class Scene
{
public:
	/******************************************************************************/
	/*!
	struct ViewPort:
	\brief	A struct to store information about the view port
	*/
	/******************************************************************************/
	struct ViewPort
	{
		/******************************************************************************/
		/*!
		float f_posX:
		\brief	Controls the leftmost position of the view port
		*/
		/******************************************************************************/
		float f_posX;
		/******************************************************************************/
		/*!
		float f_posY:
		\brief	Controls the topmost position of the view port
		*/
		/******************************************************************************/
		float f_posY;
		/******************************************************************************/
		/*!
		float f_sizeX:
		\brief	Controls the horizontal scale of the view port
		*/
		/******************************************************************************/
		float f_sizeX;
		/******************************************************************************/
		/*!
		float f_sizeY:
		\brief	Controls the vertical scale of the view port
		*/
		/******************************************************************************/
		float f_sizeY;
	};
	/******************************************************************************/
	/*!
	\brief
	Default constructor
	*/
	/******************************************************************************/
	Scene() 
	{

	}
	/******************************************************************************/
	/*!
	\brief
	Destructor
	*/
	/******************************************************************************/
	~Scene() 
	{

	}
	/******************************************************************************/
	/*!
	\brief
	Function to initialize the scene
	*/
	/******************************************************************************/
	virtual void Init() = 0;

	/******************************************************************************/
	/*!
	\brief
	Function to initialize the scene shaders
	*/
	/******************************************************************************/
	virtual void InitShaders() = 0;
	
	/******************************************************************************/
	/*!
	\brief
	Function to update the scene every frame

	\param dt - frame time
	*/
	/******************************************************************************/
	virtual void Update(double dt) = 0;
	/******************************************************************************/
	/*!
	\brief
	Function to render the scene every frame
	*/
	/******************************************************************************/
	virtual void Render() = 0;

	/******************************************************************************/
	/*!
	\brief
	Function to do clean up
	*/
	/******************************************************************************/
	virtual void Exit() = 0;

	/******************************************************************************/
	/*!
	\brief
	Function to do clean up for shader
	*/
	/******************************************************************************/
	virtual void CleanShaders() = 0;
};

#endif